// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  name            String?
  password        String
  age             Int? 
  profession      String?  
  hobbies         String? 
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  posts           Post[]
  foodPreferences FoodPreference[]  
  hostedEncontros Encontro[]       @relation("HostedEncontros")
  guestEncontros  Encontro[]       @relation("GuestEncontros")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
} 

model FoodPreference{
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String  
}

model Encontro {
  id          String   @id @default(cuid())
  date        DateTime
  location    Local    @relation(fields: [locationId], references: [id])
  locationId  String
  host        User     @relation("HostedEncontros", fields: [hostId], references: [id])
  hostId      String
  guests      User[]   @relation("GuestEncontros")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt  
}


model Local{
  id          String   @id @default(cuid())
  name        String   // Nome do local
  address     String
  type        String   // o tipo de local (restaurante, bar, caf√©, etc) 
  encontro     Encontro[]
}

model Message{
  id   String    @id @default(cuid())  
  fromUserId String 
  toUserId   String 
  message String
  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt    
}